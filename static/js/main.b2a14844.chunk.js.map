{"version":3,"sources":["fire.js","components/SnackBarAlert.tsx","components/PopupCardCreationTodo.tsx","components/PopupCardEditTodo.tsx","components/PopupCardEditList.tsx","components/CardList.tsx","components/PopupCardCreation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","analytics","Fire","callback","this","init","apps","length","auth","onAuthStateChanged","user","signInAnonymously","catch","error","ref","orderBy","unsubscribe","onSnapshot","snapshot","lists","forEach","doc","push","id","data","console","list","add","delete","update","firestore","collection","Alert","props","elevation","variant","SnackBarAlert","React","useState","snackVisible","open","setOpen","handleClose","event","reason","Snackbar","autoHideDuration","onClose","severity","description","useStyles","makeStyles","theme","createStyles","addButton","height","width","inputField","Transition","forwardRef","Grow","PopupCardCreationTodo","classes","isError","setError","inputValue","setInputValue","inputHelper","setInputHelper","inputLabel","setInputLabel","useTheme","fullScreen","useMediaQuery","breakpoints","down","snackOpen","setSnackOpen","Tooltip","title","IconButton","onClick","aria-label","Dialog","aria-labelledby","TransitionComponent","DialogTitle","DialogContent","DialogContentText","TextField","className","placeholder","label","helperText","value","onChange","target","DialogActions","Button","autoFocus","alert","Todos","Name","Completion","updateList","color","textAreaField","minHeight","dialogPos","position","right","top","bottom","Slide","direction","PopupCardEditTodo","todoId","Description","textAreaValue","setTextAreaValue","paper","multiline","PopupCardEditList","MenuItem","root","maxWidth","minWidth","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","alignItem","display","flexWrap","alignItems","goRight","marginRight","taskUnCrossed","textDecoration","taskCrossed","CardList","anchorEl","setAnchorEl","expanded","setExpanded","anchorPopover","setAnchorElPopover","openPopover","Boolean","undefined","Card","CardHeader","avatar","Fab","size","style","backgroundColor","Color","currentTarget","Popover","anchorOrigin","vertical","horizontal","transformOrigin","handleColorChange","hex","subheader","filter","todo","action","CardContent","CardActions","disableSpacing","clsx","aria-expanded","Collapse","in","timeout","unmountOnExit","GridList","cellHeight","cols","map","i","GridListTile","Typography","noWrap","Checkbox","checked","handleCheckChanged","index","indexOf","splice","handleDeleteTodo","Menu","keepMounted","deleteList","handleDeleteList","addButtonBig","addButtonSmall","PopupCardCreation","Array","addList","flexGrow","menuButton","spacing","up","goBottomRightFar","goBottomRightClose","goRightEaster","goBottomLeftEaster","left","goRightTheme","goBottomLeftTheme","search","borderRadius","shape","fade","palette","common","white","searchIcon","padding","pointerEvents","justifyContent","inputRoot","inputInput","paddingLeft","sectionDesktop","sectionMobile","App","prefersDarkMode","setThemeMode","useMemo","createMuiTheme","type","setLists","mutableLists","setMutableLists","loading","setLoading","easterEggOpen","setEasterEggOpen","easterEggCount","setEasterEggCount","searchValue","setSearchValue","useEffect","getLists","detach","ThemeProvider","CssBaseline","AppBar","Toolbar","InputBase","input","inputProps","newLists","toLowerCase","includes","visibility","alt","src","window","location","origin","cursor","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2a14844.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport \"@firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyA-UDlQYUlXhoI36lUo_HWNkh1oPgxI_Qo\",\r\n    authDomain: \"todo-57c56.firebaseapp.com\",\r\n    databaseURL: \"https://todo-57c56.firebaseio.com\",\r\n    projectId: \"todo-57c56\",\r\n    storageBucket: \"todo-57c56.appspot.com\",\r\n    messagingSenderId: \"931285358245\",\r\n    appId: \"1:931285358245:web:c5a5da1431abe473a59f4c\",\r\n    measurementId: \"G-HEKDST08QS\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\n\r\nexport default class Fire {\r\n    constructor(callback) {\r\n        this.init(callback);\r\n    }\r\n\r\n    init(callback) {\r\n        if (!firebase.apps.length) {\r\n            firebase.initializeApp(firebaseConfig);\r\n        }\r\n\r\n        firebase.auth().onAuthStateChanged(user => {\r\n            if (user) {\r\n                callback(null);\r\n            }\r\n            else {\r\n                firebase.auth().signInAnonymously().catch(error => {\r\n                    callback(error);\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    get ref() {\r\n        return firebase.firestore().collection(\"List\");\r\n    }\r\n\r\n    getLists(callback) {\r\n        let ref = this.ref.orderBy(\"Name\");\r\n        this.unsubscribe = ref.onSnapshot(snapshot => {\r\n            let lists = [];\r\n            snapshot.forEach(doc => {\r\n                lists.push({ id: doc.id, ...doc.data() });\r\n            });\r\n            callback(lists);\r\n        }, function (error) {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    addList(list){\r\n        let ref = this.ref;\r\n        ref.add(list)\r\n    }\r\n\r\n    deleteList(list){\r\n        let ref = this.ref;\r\n        ref.doc(list.id).delete();\r\n    }\r\n\r\n    updateList(list){\r\n        let ref = this.ref;\r\n        ref.doc(list.id).update(list);\r\n    }\r\n\r\n    detach(){\r\n        this.unsubscribe();\r\n    }\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\ninterface SnackBarAlertProps {\r\n    description: string;\r\n    snackVisible: boolean;\r\n}\r\n\r\nexport default function SnackBarAlert(props: SnackBarAlertProps) {\r\n    const [open, setOpen] = React.useState(props.snackVisible);\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };    \r\n\r\n    return (\r\n        <>\r\n            <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {props.description}\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fire from '../fire'\r\nimport { List } from '../objects/List';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SnackBarAlert from './SnackBarAlert';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        addButton: {\r\n            height: '6em',\r\n            width: '6em'\r\n        },\r\n        inputField: {\r\n            width: '25em'\r\n        }\r\n    }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Grow ref={ref} {...props} />;\r\n});\r\n\r\ninterface PopupCardCreationTodoProps {\r\n    list: List\r\n}\r\n\r\nexport default function PopupCardCreationTodo(props: PopupCardCreationTodoProps) {\r\n    const classes = useStyles();\r\n\r\n    // https://material-ui.com/components/dialogs/\r\n    const [open, setOpen] = React.useState(false);\r\n    const [isError, setError] = React.useState(false);\r\n    const [inputValue, setInputValue] = React.useState('');\r\n    const [inputHelper, setInputHelper] = React.useState('Veuillez entrer un nom');\r\n    const [inputLabel, setInputLabel] = React.useState('Nom');\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [snackOpen, setSnackOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setInputValue('')\r\n        setOpen(false);\r\n    };\r\n\r\n    /**\r\n     * Créé la tâche\r\n     */\r\n    const handleAddTask = () => {\r\n        if (inputValue === '') {\r\n            // Le champ est encore vide, afficher le message d'erreur\r\n            setInputHelper('Le champ est vide, veuillez entrer un nom pour votre tâche')\r\n            setInputLabel('Erreur, le champ est vide')\r\n            setError(true)\r\n        } else {\r\n            // Ok, Lancer la création\r\n            setInputHelper('Veuillez entrer un nom')\r\n            setInputLabel('Nom')\r\n            setError(false)\r\n            // Création de l'objet List\r\n            // Modification en base\r\n            let firebase = new Fire((error: any) => {\r\n                if (error) {\r\n                    return alert(\"Une erreur est survenue lors de la connexion à la base de données\");\r\n                }\r\n\r\n                props.list.Todos.push({ Name: inputValue, Completion: false })\r\n                setSnackOpen(true);\r\n                firebase.updateList(props.list)\r\n            });\r\n            setInputValue('')\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mise à jour de la value de l'Input\r\n     */\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title=\"Ajouter une tâche\">\r\n                <IconButton\r\n                    onClick={handleClickOpen}\r\n                    aria-label=\"Ajouter une tâche\"\r\n                >\r\n                    <AddIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n                TransitionComponent={Transition}\r\n            >\r\n                <DialogTitle id=\"responsive-dialog-title\">Ajouter une tâche</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Veuillez entrer le nom de la tâche.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        className={classes.inputField}\r\n                        error={isError}\r\n                        placeholder=\"Nom de la nouvelle tâche\"\r\n                        id=\"outlined-error-helper-text\"\r\n                        label={inputLabel}\r\n                        helperText={inputHelper}\r\n                        variant=\"outlined\"\r\n                        value={inputValue}\r\n                        onChange={handleChange}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleAddTask} color=\"primary\">\r\n                        Ajouter\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"default\" autoFocus>\r\n                        Annuler\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {\r\n                snackOpen &&\r\n                <SnackBarAlert description={\"Tâche créée avec succès\"} snackVisible={snackOpen} />\r\n            }\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fire from '../fire'\r\nimport { List } from '../objects/List';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport SnackBarAlert from './SnackBarAlert';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        addButton: {\r\n            height: '6em',\r\n            width: '6em'\r\n        },\r\n        inputField: {\r\n            width: '25em'\r\n        },\r\n        textAreaField: {\r\n            width: '25em',\r\n            minHeight: '5em'\r\n        },\r\n        dialogPos: {\r\n            position: 'absolute',\r\n            right: 10,\r\n            top: 10,\r\n            bottom: 10,\r\n        },\r\n    }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\ninterface PopupCardEditTodoProps {\r\n    list: List\r\n    todoId: number\r\n}\r\n\r\nexport default function PopupCardEditTodo(props: PopupCardEditTodoProps) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [isError, setError] = React.useState(false);\r\n    const [inputValue, setInputValue] = React.useState(props.list.Todos[props.todoId].Name);\r\n    const [textAreaValue, setTextAreaValue] = React.useState(props.list.Todos[props.todoId].Description);\r\n    const [inputHelper, setInputHelper] = React.useState('Veuillez entrer un nom');\r\n    const [inputLabel, setInputLabel] = React.useState('Nom');\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [snackOpen, setSnackOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleEditTask = () => {\r\n        if (inputValue === '') {\r\n            // Le champ est encore vide, afficher le message d'erreur\r\n            setInputHelper('Le champ est vide, veuillez entrer un nom pour votre tâche')\r\n            setInputLabel('Erreur, le champ est vide')\r\n            setError(true)\r\n        } else {\r\n            // Ok, Lancer la création\r\n            setInputHelper('Veuillez entrer un nom')\r\n            setInputLabel('Nom')\r\n            setError(false)\r\n            // Modification en base\r\n            let firebase = new Fire((error: any) => {\r\n                if (error) {\r\n                    return alert(\"Une erreur est survenue lors de la connexion à la base de données\");\r\n                }\r\n\r\n                setSnackOpen(true);\r\n                props.list.Todos[props.todoId].Name = inputValue\r\n                props.list.Todos[props.todoId].Description = textAreaValue\r\n                firebase.updateList(props.list)\r\n            });\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mise à jour de la value de l'Input\r\n     */\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    /**\r\n     * Mise à jour de la value du textArea\r\n     * @param event \r\n     */\r\n    const handleTextAreaChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTextAreaValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title=\"Modifier la tâche\">\r\n                <IconButton onClick={handleClickOpen}>\r\n                    <Edit />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n                TransitionComponent={Transition}\r\n                classes={{ paper: fullScreen ? '' : classes.dialogPos }}\r\n            >\r\n                <DialogTitle id=\"responsive-dialog-title\">Modifier une tâche</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Veuillez entrer le nom de la tâche.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        className={classes.inputField}\r\n                        error={isError}\r\n                        placeholder=\"Nom de la tâche\"\r\n                        id=\"outlined-error-helper-text\"\r\n                        label={inputLabel}\r\n                        helperText={inputHelper}\r\n                        variant=\"outlined\"\r\n                        value={inputValue}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <br/>\r\n                    <hr/>\r\n                    <br/>\r\n                    <TextField\r\n                        className={classes.inputField}\r\n                        id=\"outlined-multiline-static\"\r\n                        label=\"Description\"\r\n                        multiline\r\n                        placeholder=\"Description de la tâche\"\r\n                        value={textAreaValue}\r\n                        onChange={handleTextAreaChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleEditTask} color=\"primary\">\r\n                        Modifier\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"default\" autoFocus>\r\n                        Annuler\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {\r\n                snackOpen &&\r\n                <SnackBarAlert description={\"Tâche modifiée avec succès\"} snackVisible={snackOpen} />\r\n            }\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fire from '../fire'\r\nimport { List } from '../objects/List';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport SnackBarAlert from './SnackBarAlert';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        addButton: {\r\n            height: '6em',\r\n            width: '6em'\r\n        },\r\n        inputField: {\r\n            width: '25em'\r\n        }\r\n    }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Grow ref={ref} {...props} />;\r\n});\r\n\r\ninterface PopupCardEditListProps {\r\n    list: List\r\n}\r\n\r\nexport default function PopupCardEditList(props: PopupCardEditListProps) {\r\n    const classes = useStyles();\r\n\r\n    // https://material-ui.com/components/dialogs/\r\n    const [open, setOpen] = React.useState(false);\r\n    const [isError, setError] = React.useState(false);\r\n    const [inputValue, setInputValue] = React.useState(props.list.Name);\r\n    const [inputHelper, setInputHelper] = React.useState('Veuillez entrer un nom');\r\n    const [inputLabel, setInputLabel] = React.useState('Nom');\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [snackOpen, setSnackOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleEditList = () => {\r\n        if (inputValue === '') {\r\n            // Le champ est encore vide, afficher le message d'erreur\r\n            setInputHelper('Le champ est vide, veuillez entrer un nom pour votre liste')\r\n            setInputLabel('Erreur, le champ est vide')\r\n            setError(true)\r\n        } else {\r\n            // Ok, Lancer la création\r\n            setInputHelper('Veuillez entrer un nom')\r\n            setInputLabel('Nom')\r\n            setError(false)\r\n            // Modification en base\r\n            let firebase = new Fire((error: any) => {\r\n                if (error) {\r\n                    return alert(\"Une erreur est survenue lors de la connexion à la base de données\");\r\n                }\r\n\r\n                setSnackOpen(true);\r\n                props.list.Name = inputValue\r\n                firebase.updateList(props.list)\r\n            });\r\n\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mise à jour de la value de l'Input\r\n     */\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MenuItem onClick={handleClickOpen}>Modifier le titre</MenuItem>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n                TransitionComponent={Transition}\r\n            >\r\n                <DialogTitle id=\"responsive-dialog-title\">Modifier une liste</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Veuillez entrer le nom de la liste.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        className={classes.inputField}\r\n                        error={isError}\r\n                        placeholder=\"Nom de la liste\"\r\n                        id=\"outlined-error-helper-text\"\r\n                        label={inputLabel}\r\n                        helperText={inputHelper}\r\n                        variant=\"outlined\"\r\n                        value={inputValue}\r\n                        onChange={handleChange}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleEditList} color=\"primary\">\r\n                        Modifier\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"default\" autoFocus>\r\n                        Annuler\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {\r\n                snackOpen &&\r\n                <SnackBarAlert description={\"Liste modifiée avec succès\"} snackVisible={snackOpen} />\r\n            }\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { List } from '../objects/List';\r\nimport { Todo } from '../objects/Todo';\r\nimport Card from '@material-ui/core/Card';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport { CardContent, CardHeader, Collapse, GridList, GridListTile, Theme, } from '@material-ui/core';\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport clsx from 'clsx';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport PopupCardCreationTodo from './PopupCardCreationTodo'\r\nimport PopupCardEditTodo from './PopupCardEditTodo'\r\nimport PopupCardEditList from './PopupCardEditList'\r\nimport Fire from '../fire'\r\nimport Fab from '@material-ui/core/Fab';\r\nimport ColorPicker from \"react-pick-color\";\r\nimport Popover from '@material-ui/core/Popover';\r\n\r\n/**\r\n * Style\r\n */\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            maxWidth: 345,\r\n            minWidth: 345,\r\n            // flex: '1 1 150px',\r\n            // margin: '5px'\r\n        },\r\n        expand: {\r\n            transform: 'rotate(0deg)',\r\n            marginLeft: 'auto',\r\n            transition: theme.transitions.create('transform', {\r\n                duration: theme.transitions.duration.shortest,\r\n            }),\r\n        },\r\n        expandOpen: {\r\n            transform: 'rotate(180deg)',\r\n        },\r\n        alignItem: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            alignItems: 'center',\r\n        },\r\n        goRight: {\r\n            display: 'block',\r\n            marginLeft: 'auto',\r\n            marginRight: '0'\r\n        },\r\n        taskUnCrossed: {\r\n            maxWidth: '130px',\r\n            textDecoration: 'none'\r\n        },\r\n        taskCrossed: {\r\n            maxWidth: '130px',\r\n            textDecoration: 'line-through'\r\n        }\r\n    }),\r\n);\r\n\r\ninterface CardListProps {\r\n    list: List;\r\n}\r\n\r\nexport default function CardList(props: CardListProps) {\r\n    // Utilisation des styles définis\r\n    const classes = useStyles();\r\n\r\n    // https://material-ui.com/components/menus/\r\n    // Dot Menu\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    // https://material-ui.com/components/cards/\r\n    // Expand button\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const [anchorPopover, setAnchorElPopover] = React.useState<HTMLButtonElement | null>(null);\r\n\r\n    const openPopover = Boolean(anchorPopover);\r\n    const id = openPopover ? 'simple-popover' : undefined;\r\n\r\n    /**\r\n     * Popup colorPicker\r\n     * @param event \r\n     */\r\n    const handlePopoverClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorElPopover(event.currentTarget);\r\n    };\r\n\r\n    /**\r\n     * Fermeture colorPicker\r\n     */\r\n    const handlePopoverClose = () => {\r\n        setAnchorElPopover(null);\r\n    };\r\n\r\n    /**\r\n     * Gère la position de la flèche\r\n     */\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    /**\r\n     * Affiche le menu au bon endroit\r\n     * @param event \r\n     */\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    /**\r\n     * Permet de faire disparaitre le menu\r\n     */\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    /**\r\n     * Supprime la liste \r\n     */\r\n    const handleDeleteList = (list: List) => {\r\n        // Suppression en base\r\n        let firebase = new Fire((error: any) => {\r\n            if (error) {\r\n                return alert(\"Une erreur est survenue lors de la connexion à la base de données\");\r\n            }\r\n\r\n            firebase.deleteList(props.list)\r\n        });\r\n        handleClose();\r\n    };\r\n\r\n    /**\r\n     * Gère le changement de coche\r\n     * @param todo La todo à modifier\r\n     * @param i L'index de la todo dans la liste\r\n     */\r\n    const handleCheckChanged = (todo: Todo, i: number) => {\r\n        props.list.Todos[i].Completion = !props.list.Todos[i].Completion\r\n\r\n        // Modification en base\r\n        let firebase = new Fire((error: any) => {\r\n            if (error) {\r\n                return alert(\"Une erreur est survenue lors de la connexion à la base de données\");\r\n            }\r\n\r\n            firebase.updateList(props.list)\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Gère la suppression de la todo\r\n     * @param todo La todo à modifier\r\n     */\r\n    const handleDeleteTodo = (todo: Todo) => {\r\n        // Retrait de la tâche non désirée de la liste\r\n        let index = props.list.Todos.indexOf(todo)\r\n        props.list.Todos.splice(index, 1);\r\n\r\n        // Ferme le tiroir si aucune tâche n'existe\r\n        if (props.list.Todos.length === 0)\r\n            setExpanded(false)\r\n\r\n        // Modification en base\r\n        let firebase = new Fire((error: any) => {\r\n            if (error) {\r\n                return alert(\"Une erreur est survenue lors de la connexion à la base de données\");\r\n            }\r\n\r\n            firebase.updateList(props.list)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gère le changement de couleur\r\n     * @param color \r\n     */\r\n    const handleColorChange = (color: string) => {\r\n        props.list.Color = color;\r\n        // Modification en base\r\n        let firebase = new Fire((error: any) => {\r\n            if (error) {\r\n                return alert(\"Une erreur est survenue lors de la connexion à la base de données\");\r\n            }\r\n\r\n            firebase.updateList(props.list)\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    title={props.list.Name}\r\n                    avatar={\r\n                        <div>\r\n                            <Tooltip title=\"Modifier la couleur\">\r\n                                <Fab size={'small'} style={{ backgroundColor: props.list.Color }} aria-label=\"add\" onClick={handlePopoverClick}> <p></p></Fab>\r\n                            </Tooltip>\r\n                            <Popover\r\n                                id={id}\r\n                                open={openPopover}\r\n                                anchorEl={anchorPopover}\r\n                                onClose={handlePopoverClose}\r\n                                anchorOrigin={{\r\n                                    vertical: 'bottom',\r\n                                    horizontal: 'center',\r\n                                }}\r\n                                transformOrigin={{\r\n                                    vertical: 'top',\r\n                                    horizontal: 'center',\r\n                                }}\r\n                            >\r\n                                <ColorPicker color={props.list.Color} onChange={(color) => handleColorChange(color.hex)} />\r\n                            </Popover>\r\n                        </div>\r\n                    }\r\n                    subheader={\r\n                        props.list.Todos.length === 0 ? \"Aucune tâche créée.\" :\r\n                            props.list.Todos.filter(function (todo) {\r\n                                return todo.Completion;\r\n                            }).length === props.list.Todos.length ? \"Tâches toutes réalisées. Félicitation !\" :\r\n                                \"Tâches complétées : \" +\r\n                                props.list.Todos.filter(function (todo) {\r\n                                    return todo.Completion;\r\n                                }).length + \" / \" + props.list.Todos.length\r\n                    }\r\n                    action={\r\n                        <Tooltip title=\"Ouvrir le menu\">\r\n                            <IconButton aria-label=\"Paramètres\" onClick={handleClick}>\r\n                                <MoreVertIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    }\r\n                    style={{height:'7em'}}\r\n                />\r\n                <CardContent>\r\n                    <CardActions disableSpacing>\r\n                        <PopupCardCreationTodo list={props.list} />\r\n                        {\r\n                            props.list.Todos.length > 0 ?\r\n                                <Tooltip title=\"Afficher / Cacher les tâches\">\r\n                                    <IconButton className={clsx(classes.expand, { [classes.expandOpen]: expanded })}\r\n                                        onClick={handleExpandClick}\r\n                                        aria-expanded={expanded}\r\n                                        aria-label=\"Montrer plus\"\r\n                                    >\r\n                                        <ExpandMoreIcon />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                :\r\n                                null\r\n                        }\r\n                    </CardActions>\r\n                    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                        <CardContent>\r\n                            <GridList cellHeight={50} cols={1}>\r\n                                {\r\n                                    props.list.Todos.map((todo, i) => (\r\n                                        <GridListTile>\r\n                                            <div className={classes.alignItem}>\r\n                                                <Tooltip title={todo.Name}>\r\n                                                    <Typography className={todo.Completion ? classes.taskCrossed : classes.taskUnCrossed} noWrap={true}>{todo.Name}</Typography>\r\n                                                </Tooltip>\r\n                                                <Checkbox checked={todo.Completion} style={{ color: props.list.Color }} onChange={() => handleCheckChanged(todo, i)} />\r\n                                                <div className={classes.goRight}>\r\n                                                    <PopupCardEditTodo list={props.list} todoId={i} />\r\n                                                    <Tooltip title=\"Supprimer la tâche\">\r\n                                                        <IconButton onClick={() => handleDeleteTodo(todo)}>\r\n                                                            <Delete />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                </div>\r\n                                            </div>\r\n                                        </GridListTile>\r\n                                    ))\r\n                                }\r\n                            </GridList>\r\n                        </CardContent>\r\n                    </Collapse>\r\n                </CardContent>\r\n            </Card>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <PopupCardEditList list={props.list} />\r\n                <MenuItem onClick={() => handleDeleteList(props.list)}>Supprimer cette liste</MenuItem>\r\n            </Menu>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Fire from '../fire'\r\nimport { List } from '../objects/List';\r\nimport { Todo } from '../objects/Todo';\r\nimport SnackBarAlert from './SnackBarAlert';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        addButtonBig: {\r\n            height: '6em',\r\n            width: '6em'\r\n        },\r\n        addButtonSmall: {\r\n            height: '40',\r\n            width: '40'\r\n        },\r\n        inputField: {\r\n            width: '25em'\r\n        }\r\n    }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Grow ref={ref} {...props} />;\r\n});\r\n\r\nexport default function PopupCardCreation() {\r\n    const classes = useStyles();\r\n\r\n    // https://material-ui.com/components/dialogs/\r\n    const [open, setOpen] = React.useState(false);\r\n    const [isError, setError] = React.useState(false);\r\n    const [inputValue, setInputValue] = React.useState('');\r\n    const [inputHelper, setInputHelper] = React.useState('Veuillez entrer un nom');\r\n    const [inputLabel, setInputLabel] = React.useState('Nom');\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [snackOpen, setSnackOpen] = React.useState(false);\r\n\r\n    /**\r\n     * Ouvre la popup\r\n     */\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    /**\r\n     * Ferme la popup\r\n     */\r\n    const handleClose = () => {\r\n        setInputValue('')\r\n        setOpen(false);\r\n    };\r\n\r\n    /**\r\n     * Créé la liste\r\n     */\r\n    const handleAddList = () => {\r\n        if (inputValue === '') {\r\n            // Le champ est encore vide, afficher le message d'erreur\r\n            setInputHelper('Le champ est vide, veuillez entrer un nom pour votre liste')\r\n            setInputLabel('Erreur, le champ est vide')\r\n            setError(true)\r\n        } else {\r\n            // Ok, Lancer la création\r\n            setInputHelper('Veuillez entrer un nom')\r\n            setInputLabel('Nom')\r\n            setError(false)\r\n            // Création de l'objet List\r\n            let list: List = { Name: inputValue, Todos: new Array<Todo>() }\r\n\r\n            // Ajout en base\r\n            let firebase = new Fire((error: any) => {\r\n                if (error) {\r\n                    return alert(\"Une erreur est survenue lors de la connexion à la base de données\");\r\n                }\r\n\r\n                setSnackOpen(true);\r\n                firebase.addList(list);\r\n            });\r\n\r\n            setInputValue('')\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mise à jour de la value de l'Input\r\n     */\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Tooltip title=\"Ajouter une liste\">\r\n                <Fab className={fullScreen ? classes.addButtonSmall : classes.addButtonBig} color=\"primary\" aria-label=\"add\" onClick={handleClickOpen}>\r\n                    <AddIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n                TransitionComponent={Transition}\r\n            >\r\n                <DialogTitle id=\"responsive-dialog-title\">Ajouter une liste</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Veuillez entrer le nom de la liste.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        className={classes.inputField}\r\n                        error={isError}\r\n                        placeholder=\"Nom de la nouvelle liste\"\r\n                        id=\"outlined-error-helper-text\"\r\n                        label={inputLabel}\r\n                        helperText={inputHelper}\r\n                        variant=\"outlined\"\r\n                        value={inputValue}\r\n                        onChange={handleChange}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleAddList} color=\"primary\">\r\n                        Ajouter\r\n                    </Button>\r\n                    <Button onClick={handleClose} color=\"default\" autoFocus>\r\n                        Annuler\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {\r\n                snackOpen &&\r\n                <SnackBarAlert description={\"Liste créée avec succès\"} snackVisible={snackOpen} />\r\n            }\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport 'fontsource-roboto';\r\nimport { List } from './objects/List';\r\nimport Fire from './fire'\r\nimport CardList from './components/CardList'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles, createStyles, useTheme, fade, createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { Theme, Typography } from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport PopupCardCreation from './components/PopupCardCreation';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      display: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n\r\n      userSelect: 'none',\r\n      cursor: 'pointer'\r\n    },\r\n    goBottomRightFar: {\r\n      position: 'fixed',\r\n      right: '3em',\r\n      bottom: '3em'\r\n    },\r\n    goBottomRightClose: {\r\n      position: 'fixed',\r\n      right: '1em',\r\n      bottom: '1em'\r\n    },\r\n    goRightEaster: {\r\n      position: 'fixed',\r\n      right: '1em',\r\n      color: 'white'\r\n    },\r\n    goBottomLeftEaster: {\r\n      position: 'fixed',\r\n      left: '1em',\r\n      bottom: '3em',\r\n      color: 'black'\r\n    },\r\n    goRightTheme: {\r\n      position: 'fixed',\r\n      right: '3em',\r\n    },\r\n    goBottomLeftTheme: {\r\n      position: 'fixed',\r\n      left: '0',\r\n      bottom: '0',\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.common.white, 0.15),\r\n      '&:hover': {\r\n        backgroundColor: fade(theme.palette.common.white, 0.25),\r\n      },\r\n      marginRight: theme.spacing(2),\r\n      marginLeft: 0,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(3),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('md')]: {\r\n        width: 'auto',\r\n      },\r\n    },\r\n    sectionDesktop: {\r\n      display: 'none',\r\n      [theme.breakpoints.up('md')]: {\r\n        display: 'flex',\r\n      },\r\n    },\r\n    sectionMobile: {\r\n      display: 'flex',\r\n      [theme.breakpoints.up('md')]: {\r\n        display: 'none',\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [prefersDarkMode, setThemeMode] = React.useState(false);\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: prefersDarkMode ? 'light' : 'dark',\r\n        },\r\n      }),\r\n    [prefersDarkMode],\r\n  );\r\n\r\n  const [lists, setLists] = useState(Array<List>())\r\n  const [mutableLists, setMutableLists] = useState(Array<List>())\r\n  const [loading, setLoading] = useState(true)\r\n  const [easterEggOpen, setEasterEggOpen] = React.useState(false);\r\n  const [easterEggCount, setEasterEggCount] = React.useState(0);\r\n  const [searchValue, setSearchValue] = React.useState('');\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n  useEffect(() => {\r\n    let firebase = new Fire((error: any) => {\r\n      if (error) {\r\n        return alert(\"Une erreur est survenue lors de la connexion à la base de données\");\r\n      }\r\n\r\n      firebase.getLists((lists: List[]) => {\r\n        setLists(lists);\r\n        setMutableLists(lists)\r\n        setLoading(false);\r\n      });\r\n\r\n      return function unsubscribe() {\r\n        firebase.detach();\r\n      }\r\n    })\r\n  }, []);\r\n\r\n  /**\r\n    * Mise à jour de la value de l'Input\r\n    */\r\n  const handleEasterEgg = () => {\r\n    if (easterEggCount > 8) {\r\n      setEasterEggCount(easterEggCount + 1)\r\n      setEasterEggOpen(true)\r\n      setEasterEggCount(0)\r\n    } else {\r\n      setEasterEggCount(easterEggCount + 1)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ferme l'easterEgg\r\n   */\r\n  const handleEasterEggClose = () => {\r\n    setEasterEggOpen(false);\r\n  };\r\n\r\n  /**\r\n   * Met à jour la valeur de la recherche\r\n   * @param event \r\n   */\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchValue(event.target.value);\r\n    let newLists = lists.filter(list => list.Name.toLowerCase().includes(event.target.value.toLowerCase()));\r\n    setMutableLists(newLists)\r\n  }\r\n\r\n  /**\r\n   * Gère le changement de thème\r\n   */\r\n  const handleChangeTheme = () => {\r\n    setThemeMode(!prefersDarkMode)\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme} >\r\n      <CssBaseline />\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Tooltip title=\"Mais que se passe-t-il si je clique là dessus ?\">\r\n            <Typography onClick={handleEasterEgg} className={classes.title} variant=\"h5\">Application Todo</Typography>\r\n          </Tooltip>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Rechercher une liste...\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              value={searchValue}\r\n              onChange={handleSearchChange}\r\n            />\r\n          </div>\r\n          <Typography style={{ visibility: easterEggCount > 0 ? 'visible' : 'hidden' }} className={fullScreen ? classes.goBottomLeftEaster : classes.goRightEaster} variant=\"body1\">{easterEggCount + \" / \" + 10}</Typography>\r\n          <Tooltip title=\"Activer le thème clair / sombre\" className={fullScreen ? classes.goBottomLeftTheme : classes.goRightTheme}>\r\n            <IconButton aria-label=\"theming\" onClick={handleChangeTheme}>\r\n              <Brightness4Icon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <header>\r\n      </header>\r\n      <body>\r\n        <Dialog\r\n          open={easterEggOpen}\r\n          onClose={handleEasterEggClose}\r\n        >\r\n          <img alt=\"easterEgg\" src={window.location.origin + '/easterEgg.jpg'}\r\n            onClick={() => window.open(\"https://knowyourmeme.com/memes/do-you-think-this-is-a-game\", \"_blank\")}\r\n            style={{ cursor: 'pointer' }}\r\n          />\r\n        </Dialog>\r\n        <div className=\"flexContainer\">\r\n          {loading ?\r\n            <CircularProgress /> :\r\n            mutableLists.map((list, i) => {\r\n              return (\r\n                <CardList list={list} />\r\n              );\r\n            })}\r\n        </div>\r\n        <div className={fullScreen ? classes.goBottomRightClose : classes.goBottomRightFar}>\r\n          <PopupCardCreation />\r\n        </div>\r\n      </body>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}